type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import battleship.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            if (!output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should report an error " +
                        "if there is an input mistake. " +
                        "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("A1");
            checkShot(getFieldMatrix(output), "A1", output);

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test1() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            if (!output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should report an error " +
                        "if there is an input mistake. " +
                        "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output) || !output.toLowerCase().contains("error")) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("M1");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("A11");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong(
                    "Your program should not print a game field " +
                        "if there is an input mistake.");
            }

            output = main.execute("E4");
            checkMissing(getFieldMatrix(output), "E4", output);

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test2() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("E5 F5").trim();
            findShipByCoordinates(getFieldMatrix(output), "E5 F5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("E8");
            checkShot(getFieldMatrix(output), "E8", output);

            return CheckResult.correct();
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        void checkShot(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("hit")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a hit.\n" +
                        "You should print \"You hit a ship!\".");
            }

            if (output.toLowerCase().contains("missed")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You hit a ship!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("You should print \"X\" in " +
                    " coordinates where you hit the ship.");
            }
        }

        void checkMissing(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("missed")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a miss.\n" +
                    "You should print \"You missed!\".");
            }

            if (output.toLowerCase().contains("hit")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You missed!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                throw new WrongAnswer("You should print \"M\" in " +
                    " coordinates where you missed.");
            }
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/Coordinates.java
  visible: true
  text: |
    package battleship;

    public class Coordinates {
        private int x;
        private int y;

        public Coordinates(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public int getX() {
            return x;
        }

        public void setX(int x) {
            this.x = x;
        }

        public int getY() {
            return y;
        }

        public void setY(int y) {
            this.y = y;
        }
    }
  learner_created: true
- name: src/battleship/ships/Cruiser.java
  visible: true
  text: |-
    package battleship.ships;

    public class Cruiser implements Ship{

        private static final String NAME = "Cruiser";
        private static final int SIZE = 3;

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        public int getSize() {
            return SIZE;
        }
    }
  learner_created: true
- name: src/battleship/ships/Destroyer.java
  visible: true
  text: |
    package battleship.ships;

    public class Destroyer implements Ship{

        private static final String NAME = "Destroyer";
        private static final int SIZE = 2;

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        public int getSize() {
            return SIZE;
        }
    }
  learner_created: true
- name: src/battleship/ships/Ship.java
  visible: true
  text: |
    package battleship.ships;

    public interface Ship {
        String getName();
        int getSize();
    }
  learner_created: true
- name: src/battleship/ships/AircraftCarrier.java
  visible: true
  text: |
    package battleship.ships;

    public class AircraftCarrier implements Ship{

        private static final String NAME = "Aircraft Carrier";
        private static final int SIZE = 5;

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        public int getSize() {
            return SIZE;
        }
    }
  learner_created: true
- name: src/battleship/ships/Battleship.java
  visible: true
  text: |-
    package battleship.ships;

    public class Battleship implements Ship{

        private static final String NAME = "Battleship";
        private static final int SIZE = 4;

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        public int getSize() {
            return SIZE;
        }
    }
  learner_created: true
- name: src/battleship/ships/Submarine.java
  visible: true
  text: |-
    package battleship.ships;

    public class Submarine implements Ship{

        private static final String NAME = "Submarine";
        private static final int SIZE = 3;

        @Override
        public String getName() {
            return NAME;
        }

        @Override
        public int getSize() {
            return SIZE;
        }
    }
  learner_created: true
- name: src/battleship/Map.java
  visible: true
  text: |
    package battleship;

    import battleship.ships.Ship;

    import java.util.Arrays;
    import java.util.Scanner;

    public class Map {
        private String[][] matrix;
        private final String SHIP_PART = "O";
        private final String FOG_OF_WAR = "~";
        private int rowsWithNum;
        private int columnsWithNum;
        private String rowLetters = " ABCDEFGHIJ";

        public Map(int rows, int columns) {
            this.rowsWithNum = rows + 1;
            this.columnsWithNum = columns + 1;
            this.matrix = new String[rowsWithNum][columnsWithNum];
            create();
        }

        public void create() {
            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < matrix[i].length; j++) {
                    if (i == 0) {
                        matrix[i][j] = String.valueOf(j == 0 ? " " : j);
                    } else if (j == 0) {
                        matrix[i][j] = String.valueOf(rowLetters.charAt(i));
                    } else {
                        matrix[i][j] = FOG_OF_WAR;
                    }
                }
            }
        }

        void display() {
            System.out.print("\n");
            for (String[] element : matrix) {
                System.out.println(
                        Arrays.toString(element)
                                .replace("[", "")
                                .replace("]", "")
                                .replace(",", ""));
            }
            System.out.print("\n");
        }

        private Coordinates getPoint(String coordinates) {
            int x = getLetterValue(coordinates.toUpperCase().charAt(0));
            int y = Integer.parseInt(coordinates.replaceAll("[\\D]", ""));
            return new Coordinates(x, y);
        }

        void initializeShip(Ship ship) {
            System.out.printf("Enter the coordinates of the %s (%d cells)\n", ship.getName(), ship.getSize());
            getInput(ship);
        }

        void getInput(Ship ship) {
            Scanner scanner = new Scanner(System.in);
            String firstPoint = scanner.next();
            String secondPoint  = scanner.next();
            Coordinates firstCoordinate = getPoint(firstPoint);
            Coordinates secondCoordinate = getPoint(secondPoint);
            placeShipOnMap(ship,firstCoordinate,secondCoordinate);
        }

        private void placeShipOnMap(Ship ship,Coordinates firstCoordinate, Coordinates secondCoordinate) {
            swapPointsIfNeeded(firstCoordinate,secondCoordinate);
            if(!(verifyInput(firstCoordinate, secondCoordinate, ship))) {
                drawShipOnMap(firstCoordinate, secondCoordinate);
            }else{
                getInput(ship);
            }

        }

        private boolean verifyInput(Coordinates firstCoordinates, Coordinates secondCoordinates, Ship ship) {
            if (checkCollision(firstCoordinates, secondCoordinates)) {
                System.out.print("\nError! You placed it too close to another one. Try again:\n");
                return true;
            }else if (firstCoordinates.getX() != secondCoordinates.getX() && firstCoordinates.getY() != secondCoordinates.getY()) {
                System.out.print("\nError! Wrong ship location! Try again:\n");
                return  true;
            }else if (checkShipSize(firstCoordinates, secondCoordinates, ship)) {
                System.out.printf("\nError! Wrong length of the %s! Try again:\n", ship.getName());
                return true;
            }
            return false;
        }

        private void drawShipOnMap(Coordinates firstCoordinates, Coordinates secondCoordinates) {
            for (int i = firstCoordinates.getX(); i <= secondCoordinates.getX(); i++) {
                for (int j = firstCoordinates.getY(); j <= secondCoordinates.getY(); j++) {
                    matrix[i][j] = SHIP_PART;
                }
            }
        }

        private boolean checkCollision(Coordinates firstCoordinates, Coordinates secondCoordinates) {
            int x1 = beyondMap(firstCoordinates.getX()- 1);
            int y1 = beyondMap(firstCoordinates.getY()- 1);
            int x2 = beyondMap(secondCoordinates.getX()+ 1);
            int y2 = beyondMap(secondCoordinates.getY()+ 1) ;
            for (int i = x1; i <= x2; i++) {
                for (int j = y1; j <= y2; j++) {
                    if (matrix[i][j] == SHIP_PART) {
                        return true;
                    }
                }
            }
            return false;
        }


        private void swapPointsIfNeeded(Coordinates firstCoordinate, Coordinates secondCoordinate) {
            if (firstCoordinate.getX() > secondCoordinate.getX() || firstCoordinate.getY() > secondCoordinate.getY()) {
                Coordinates tempCoordinate = new Coordinates(firstCoordinate.getX(), firstCoordinate.getY());
                firstCoordinate.setX(secondCoordinate.getX());
                firstCoordinate.setY(secondCoordinate.getY());
                secondCoordinate.setX(tempCoordinate.getX());
                secondCoordinate.setY(tempCoordinate.getY());
            }
        }

        boolean checkShipSize(Coordinates firstCoordinates, Coordinates secondCoordinates, Ship ship) {
            if ((secondCoordinates.getX() - firstCoordinates.getX() > ship.getSize()-1)
                    || (secondCoordinates.getY() - firstCoordinates.getY() > ship.getSize()-1)) {
                return true;
            } else if ((secondCoordinates.getX() - firstCoordinates.getX() < ship.getSize()-1)
                    && (secondCoordinates.getY() - firstCoordinates.getY() < ship.getSize()-1)) {
                return true;
            }
            return false;
        }

        private int beyondMap(int x) {
            return x > 10 ? x - 1 : x < 1 ? x + 1 : x;
        }


        // This method return the coordinates letter value
        private int getLetterValue(char letter) {
            for (int i = 0; i < rowLetters.length(); i++) {
                if (letter == rowLetters.charAt(i)) {
                    return i;
                }
            }
            return 0;
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/664/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/125/stages/664/implement">JetBrains
    Academy</a>
  time: Wed, 30 Dec 2020 23:14:17 UTC
record: -1
